{% doc %}
  @prompt
    build this for me: <style>
      .sub-category{
        width:85%;
        margin:0 auto;
      }
      .content-area{
        text-align:center;
        padding:15px 0px;
      }
      .content-area img{
        height:100px;
        width:100px;
        margin: 0 auto;
        object-fit:cover;
        border-radius:50%;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        transition: all 0.2s ease-in-out;
      }
      .content-area:hover img{
        transform: scale(1.1);
      }
      .content-area a{
        text-decoration: none;
      }
      .content-area h2{
        font-size: 14px;
      }
    
      /* Media Query for Mobile */
      @media (max-width: 600px) {
        .content-area img {
          height: 60px; /* Adjust the height as needed for mobile */
          width: 60px; /* Adjust the width as needed for mobile */
        }
        .content-area h2{
          font-size: 12px;
        }
      }
      
    </style>
    <link rel="stylesheet" href="http://kenwheeler.github.io/slick/slick/slick.css" type="text/css"/>
    <link rel="stylesheet" href="http://kenwheeler.github.io/slick/slick/slick-theme.css" type="text/css"/>
    <div class="sub-category">
      {% for block in section.blocks %}
      <div class="content-area">
        <a href="{{ block.settings.cat_link }}">
        <img src="{{ block.settings.cat_img | img_url:'' }}"/>
        <h2>{{ block.settings.cat_title }}</h2>
        </a>
      </div>
      {% endfor %}
      
    </div>
    
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="http://kenwheeler.github.io/slick/slick/slick.js"></script>
    <script>
    
      $('.sub-category').slick({
      infinite: false,
      speed: 300,
      slidesToShow: 8,
      slidesToScroll: 4,
      responsive: [
        {
          breakpoint: 1024,
          settings: {
            slidesToShow: 4,
            slidesToScroll: 3,
            infinite: true,
          }
        },
        {
          breakpoint: 600,
          settings: {
            slidesToShow: 4,
            slidesToScroll: 2
          }
        },
        {
          breakpoint: 480,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 2
     , the swipe isn't working properly. it should of the canvas and swipe isn't working , still swiping isn't working in mobile version fix it i don't want arrow for swiping, the swipe isn't that smooth , the catagory size and shadow effect should be customizable 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-carousel-{{ ai_gen_id }} {
    width: 85%;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
    touch-action: pan-y;
    user-select: none;
  }

  .ai-category-carousel__container-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.item_spacing }}px;
    cursor: grab;
    will-change: transform;
    transform: translateX(0);
  }

  .ai-category-carousel__container-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-category-carousel__container-{{ ai_gen_id }}.smooth {
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .ai-category-carousel__item-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - ({{ block.settings.slides_desktop | minus: 1 }} * {{ block.settings.item_spacing }}px)) / {{ block.settings.slides_desktop }});
    text-align: center;
    padding: 15px 0;
    pointer-events: auto;
  }

  .ai-category-carousel__link-{{ ai_gen_id }} {
    text-decoration: none;
    display: block;
    color: inherit;
  }

  .ai-category-carousel__image-{{ ai_gen_id }} {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto {{ block.settings.text_spacing }}px;
    object-fit: cover;
    border-radius: {{ block.settings.border_radius }}%;
    {% if block.settings.enable_shadow %}
      box-shadow: {{ block.settings.shadow_horizontal }}px {{ block.settings.shadow_vertical }}px {{ block.settings.shadow_blur }}px {{ block.settings.shadow_spread }}px {{ block.settings.shadow_color }};
    {% endif %}
    transition: all {{ block.settings.transition_duration }}s ease-in-out;
    display: block;
    pointer-events: none;
  }

  .ai-category-carousel__item-{{ ai_gen_id }}:hover .ai-category-carousel__image-{{ ai_gen_id }} {
    transform: scale({{ block.settings.hover_scale }});
    {% if block.settings.enable_hover_shadow %}
      box-shadow: {{ block.settings.hover_shadow_horizontal }}px {{ block.settings.hover_shadow_vertical }}px {{ block.settings.hover_shadow_blur }}px {{ block.settings.hover_shadow_spread }}px {{ block.settings.hover_shadow_color }};
    {% endif %}
  }

  .ai-category-carousel__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    margin: 0;
    color: {{ block.settings.text_color }};
    font-family: {{ block.settings.title_font.family }}, {{ block.settings.title_font.fallback_families }};
    font-weight: {{ block.settings.title_font.weight }};
    font-style: {{ block.settings.title_font.style }};
    pointer-events: none;
  }

  .ai-category-carousel__placeholder-{{ ai_gen_id }} {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto {{ block.settings.text_spacing }}px;
    border-radius: {{ block.settings.border_radius }}%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    {% if block.settings.enable_shadow %}
      box-shadow: {{ block.settings.shadow_horizontal }}px {{ block.settings.shadow_vertical }}px {{ block.settings.shadow_blur }}px {{ block.settings.shadow_spread }}px {{ block.settings.shadow_color }};
    {% endif %}
    pointer-events: none;
  }

  .ai-category-carousel__placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }

  .ai-category-carousel__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: #666;
    font-style: italic;
  }

  @media (max-width: 1024px) {
    .ai-category-carousel__item-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - ({{ block.settings.slides_tablet | minus: 1 }} * {{ block.settings.item_spacing }}px)) / {{ block.settings.slides_tablet }});
    }

    .ai-category-carousel__image-{{ ai_gen_id }} {
      height: {{ block.settings.image_size_tablet }}px;
      width: {{ block.settings.image_size_tablet }}px;
    }

    .ai-category-carousel__placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.image_size_tablet }}px;
      width: {{ block.settings.image_size_tablet }}px;
    }

    .ai-category-carousel__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size_tablet }}px;
    }
  }

  @media (max-width: 600px) {
    .ai-category-carousel-{{ ai_gen_id }} {
      touch-action: pan-x;
    }

    .ai-category-carousel__item-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - ({{ block.settings.slides_mobile | minus: 1 }} * {{ block.settings.item_spacing }}px)) / {{ block.settings.slides_mobile }});
    }

    .ai-category-carousel__image-{{ ai_gen_id }} {
      height: {{ block.settings.image_size_mobile }}px;
      width: {{ block.settings.image_size_mobile }}px;
    }

    .ai-category-carousel__placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.image_size_mobile }}px;
      width: {{ block.settings.image_size_mobile }}px;
    }

    .ai-category-carousel__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size_mobile }}px;
    }
  }
{% endstyle %}

<category-carousel-{{ ai_gen_id }}
  class="ai-category-carousel-{{ ai_gen_id }}"
  data-slides-desktop="{{ block.settings.slides_desktop }}"
  data-slides-tablet="{{ block.settings.slides_tablet }}"
  data-slides-mobile="{{ block.settings.slides_mobile }}"
  data-scroll-amount="{{ block.settings.scroll_amount }}"
  {{ block.shopify_attributes }}
>
  {% assign has_categories = false %}
  {% for i in (1..8) %}
    {% assign image_key = 'category_' | append: i | append: '_image' %}
    {% assign title_key = 'category_' | append: i | append: '_title' %}
    {% assign link_key = 'category_' | append: i | append: '_link' %}
    
    {% if block.settings[image_key] != blank or block.settings[title_key] != blank %}
      {% assign has_categories = true %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% if has_categories %}
    <div class="ai-category-carousel__container-{{ ai_gen_id }}">
      {% for i in (1..8) %}
        {% assign image_key = 'category_' | append: i | append: '_image' %}
        {% assign title_key = 'category_' | append: i | append: '_title' %}
        {% assign link_key = 'category_' | append: i | append: '_link' %}
        
        {% assign category_image = block.settings[image_key] %}
        {% assign category_title = block.settings[title_key] %}
        {% assign category_link = block.settings[link_key] %}

        {% if category_image != blank or category_title != blank %}
          <div class="ai-category-carousel__item-{{ ai_gen_id }}">
            {% if category_link != blank %}
              <a href="{{ category_link }}" class="ai-category-carousel__link-{{ ai_gen_id }}">
            {% endif %}
            
            {% if category_image != blank %}
              <img
                src="{{ category_image | image_url: width: 200 }}"
                alt="{{ category_title | escape }}"
                class="ai-category-carousel__image-{{ ai_gen_id }}"
                loading="lazy"
                width="200"
                height="200"
              >
            {% else %}
              <div class="ai-category-carousel__placeholder-{{ ai_gen_id }}">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}

            {% if category_title != blank %}
              <h3 class="ai-category-carousel__title-{{ ai_gen_id }}">{{ category_title }}</h3>
            {% endif %}

            {% if category_link != blank %}
              </a>
            {% endif %}
          </div>
        {% endif %}
      {% endfor %}
    </div>
  {% else %}
    <div class="ai-category-carousel__empty-state-{{ ai_gen_id }}">
      Add categories to display your carousel
    </div>
  {% endif %}
</category-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class CategoryCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.isAnimating = false;
        this.startX = 0;
        this.currentX = 0;
        this.isDragging = false;
        this.hasMoved = false;
        this.startTime = 0;
        this.lastMoveTime = 0;
        this.velocity = 0;
        this.currentTranslate = 0;
        this.prevTranslate = 0;
        this.animationId = null;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-category-carousel__container-{{ ai_gen_id }}');
        this.items = this.querySelectorAll('.ai-category-carousel__item-{{ ai_gen_id }}');
        
        if (!this.container || this.items.length === 0) return;
        
        this.slidesDesktop = parseInt(this.dataset.slidesDesktop);
        this.slidesTablet = parseInt(this.dataset.slidesTablet);
        this.slidesMobile = parseInt(this.dataset.slidesMobile);
        this.scrollAmount = parseInt(this.dataset.scrollAmount);

        this.setupEventListeners();
        this.updateCarousel();
      }

      setupEventListeners() {
        this.addEventListener('touchstart', this.handleStart.bind(this), { passive: false });
        this.addEventListener('touchmove', this.handleMove.bind(this), { passive: false });
        this.addEventListener('touchend', this.handleEnd.bind(this), { passive: false });

        this.addEventListener('mousedown', this.handleStart.bind(this));
        document.addEventListener('mousemove', this.handleMove.bind(this));
        document.addEventListener('mouseup', this.handleEnd.bind(this));

        this.addEventListener('click', this.handleClick.bind(this), true);

        window.addEventListener('resize', () => {
          this.currentIndex = 0;
          this.currentTranslate = 0;
          this.prevTranslate = 0;
          this.updateCarousel();
        });
      }

      handleStart(e) {
        if (this.isAnimating) return;
        
        this.isDragging = true;
        this.hasMoved = false;
        this.startTime = Date.now();
        this.lastMoveTime = this.startTime;
        
        const clientX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
        this.startX = clientX;
        this.currentX = clientX;
        
        this.container.classList.remove('smooth');
        
        if (this.animationId) {
          cancelAnimationFrame(this.animationId);
        }
        
        e.preventDefault();
      }

      handleMove(e) {
        if (!this.isDragging) return;
        
        const currentTime = Date.now();
        const clientX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
        
        const deltaX = clientX - this.startX;
        const deltaTime = currentTime - this.lastMoveTime;
        
        if (Math.abs(deltaX) > 3) {
          this.hasMoved = true;
          
          if (deltaTime > 0) {
            this.velocity = (clientX - this.currentX) / deltaTime;
          }
          
          this.currentX = clientX;
          this.lastMoveTime = currentTime;
          
          const containerWidth = this.offsetWidth;
          const movePercent = (deltaX / containerWidth) * 100;
          const newTranslate = this.prevTranslate + movePercent;
          
          const maxTranslate = this.getMaxTranslate();
          this.currentTranslate = Math.max(Math.min(newTranslate, 5), -(maxTranslate + 5));
          
          this.setTransform();
        }
        
        e.preventDefault();
      }

      handleEnd(e) {
        if (!this.isDragging) return;
        
        this.isDragging = false;
        this.container.classList.add('smooth');
        
        const deltaX = this.currentX - this.startX;
        const deltaTime = Date.now() - this.startTime;
        
        const threshold = Math.abs(this.velocity) > 0.3 ? 30 : 80;
        
        if (Math.abs(deltaX) > threshold || Math.abs(this.velocity) > 0.3) {
          if (deltaX > 0 || this.velocity > 0) {
            this.slide('prev');
          } else {
            this.slide('next');
          }
        } else {
          this.snapToPosition();
        }
        
        this.velocity = 0;
      }

      handleClick(e) {
        if (this.hasMoved) {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          return false;
        }
      }

      setTransform() {
        this.container.style.transform = `translateX(${this.currentTranslate}%)`;
      }

      getCurrentSlidesPerView() {
        const width = window.innerWidth;
        if (width <= 600) return this.slidesMobile;
        if (width <= 1024) return this.slidesTablet;
        return this.slidesDesktop;
      }

      getMaxIndex() {
        const slidesPerView = this.getCurrentSlidesPerView();
        return Math.max(0, this.items.length - slidesPerView);
      }

      getMaxTranslate() {
        const slidesPerView = this.getCurrentSlidesPerView();
        const maxIndex = this.getMaxIndex();
        return (maxIndex / this.items.length) * 100;
      }

      slide(direction) {
        if (this.isAnimating) return;
        
        const maxIndex = this.getMaxIndex();
        const scrollAmount = this.scrollAmount;
        
        if (direction === 'next') {
          this.currentIndex = Math.min(this.currentIndex + scrollAmount, maxIndex);
        } else {
          this.currentIndex = Math.max(this.currentIndex - scrollAmount, 0);
        }
        
        this.updateCarousel();
      }

      snapToPosition() {
        const slidesPerView = this.getCurrentSlidesPerView();
        const itemWidth = 100 / this.items.length;
        const currentPosition = Math.abs(this.currentTranslate);
        
        this.currentIndex = Math.round(currentPosition / itemWidth);
        this.currentIndex = Math.max(0, Math.min(this.currentIndex, this.getMaxIndex()));
        
        this.updateCarousel();
      }

      updateCarousel() {
        this.isAnimating = true;
        
        const itemWidth = 100 / this.items.length;
        const targetTranslate = -(this.currentIndex * itemWidth);
        
        this.currentTranslate = targetTranslate;
        this.prevTranslate = targetTranslate;
        
        this.container.classList.add('smooth');
        this.setTransform();
        
        setTimeout(() => {
          this.isAnimating = false;
        }, 400);
      }
    }

    customElements.define('category-carousel-{{ ai_gen_id }}', CategoryCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "slides_desktop",
      "min": 3,
      "max": 8,
      "step": 1,
      "label": "Categories per row (desktop)",
      "default": 6
    },
    {
      "type": "range",
      "id": "slides_tablet",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Categories per row (tablet)",
      "default": 4
    },
    {
      "type": "range",
      "id": "slides_mobile",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Categories per row (mobile)",
      "default": 3
    },
    {
      "type": "range",
      "id": "scroll_amount",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Scroll amount",
      "default": 2
    },
    {
      "type": "range",
      "id": "item_spacing",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Space between items",
      "default": 16
    },
    {
      "type": "header",
      "content": "Image size"
    },
    {
      "type": "range",
      "id": "image_size",
      "min": 60,
      "max": 200,
      "step": 5,
      "unit": "px",
      "label": "Desktop image size",
      "default": 100
    },
    {
      "type": "range",
      "id": "image_size_tablet",
      "min": 50,
      "max": 150,
      "step": 5,
      "unit": "px",
      "label": "Tablet image size",
      "default": 80
    },
    {
      "type": "range",
      "id": "image_size_mobile",
      "min": 40,
      "max": 120,
      "step": 5,
      "unit": "px",
      "label": "Mobile image size",
      "default": 70
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "%",
      "label": "Border radius",
      "default": 50
    },
    {
      "type": "header",
      "content": "Shadow effects"
    },
    {
      "type": "checkbox",
      "id": "enable_shadow",
      "label": "Enable shadow",
      "default": true
    },
    {
      "type": "range",
      "id": "shadow_horizontal",
      "min": -20,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Shadow horizontal offset",
      "default": 0
    },
    {
      "type": "range",
      "id": "shadow_vertical",
      "min": -20,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Shadow vertical offset",
      "default": 2
    },
    {
      "type": "range",
      "id": "shadow_blur",
      "min": 0,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Shadow blur",
      "default": 8
    },
    {
      "type": "range",
      "id": "shadow_spread",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow spread",
      "default": 0
    },
    {
      "type": "color",
      "id": "shadow_color",
      "label": "Shadow color",
      "default": "rgba(99, 99, 99, 0.2)"
    },
    {
      "type": "header",
      "content": "Hover effects"
    },
    {
      "type": "range",
      "id": "hover_scale",
      "min": 1.0,
      "max": 1.5,
      "step": 0.1,
      "label": "Hover scale effect",
      "default": 1.1
    },
    {
      "type": "range",
      "id": "transition_duration",
      "min": 0.1,
      "max": 1.0,
      "step": 0.1,
      "unit": "s",
      "label": "Transition duration",
      "default": 0.2
    },
    {
      "type": "checkbox",
      "id": "enable_hover_shadow",
      "label": "Enable hover shadow",
      "default": true
    },
    {
      "type": "range",
      "id": "hover_shadow_horizontal",
      "min": -20,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Hover shadow horizontal",
      "default": 0
    },
    {
      "type": "range",
      "id": "hover_shadow_vertical",
      "min": -20,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Hover shadow vertical",
      "default": 4
    },
    {
      "type": "range",
      "id": "hover_shadow_blur",
      "min": 0,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Hover shadow blur",
      "default": 12
    },
    {
      "type": "range",
      "id": "hover_shadow_spread",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Hover shadow spread",
      "default": 0
    },
    {
      "type": "color",
      "id": "hover_shadow_color",
      "label": "Hover shadow color",
      "default": "rgba(99, 99, 99, 0.3)"
    },
    {
      "type": "header",
      "content": "Text"
    },
    {
      "type": "font_picker",
      "id": "title_font",
      "label": "Title font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Desktop title size",
      "default": 14
    },
    {
      "type": "range",
      "id": "title_size_tablet",
      "min": 8,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Tablet title size",
      "default": 13
    },
    {
      "type": "range",
      "id": "title_size_mobile",
      "min": 8,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Mobile title size",
      "default": 12
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "range",
      "id": "text_spacing",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Space between image and text",
      "default": 8
    },
    {
      "type": "header",
      "content": "Category 1"
    },
    {
      "type": "image_picker",
      "id": "category_1_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_1_title",
      "label": "Title",
      "default": "Category 1"
    },
    {
      "type": "url",
      "id": "category_1_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 2"
    },
    {
      "type": "image_picker",
      "id": "category_2_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_2_title",
      "label": "Title",
      "default": "Category 2"
    },
    {
      "type": "url",
      "id": "category_2_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 3"
    },
    {
      "type": "image_picker",
      "id": "category_3_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_3_title",
      "label": "Title",
      "default": "Category 3"
    },
    {
      "type": "url",
      "id": "category_3_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 4"
    },
    {
      "type": "image_picker",
      "id": "category_4_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_4_title",
      "label": "Title",
      "default": "Category 4"
    },
    {
      "type": "url",
      "id": "category_4_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 5"
    },
    {
      "type": "image_picker",
      "id": "category_5_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_5_title",
      "label": "Title",
      "default": "Category 5"
    },
    {
      "type": "url",
      "id": "category_5_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 6"
    },
    {
      "type": "image_picker",
      "id": "category_6_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_6_title",
      "label": "Title",
      "default": "Category 6"
    },
    {
      "type": "url",
      "id": "category_6_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 7"
    },
    {
      "type": "image_picker",
      "id": "category_7_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_7_title",
      "label": "Title"
    },
    {
      "type": "url",
      "id": "category_7_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 8"
    },
    {
      "type": "image_picker",
      "id": "category_8_image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "category_8_title",
      "label": "Title"
    },
    {
      "type": "url",
      "id": "category_8_link",
      "label": "Link"
    }
  ],
  "presets": [
    {
      "name": "Category carousel"
    }
  ]
}
{% endschema %}