{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-carousel-wrapper-{{ ai_gen_id }} {
    background-color: {{ block.settings.section_background_color }};
    padding: {{ block.settings.section_padding }}px 0;
    overflow: hidden;
  }

  .ai-category-carousel-{{ ai_gen_id }} {
    width: 85%;
    margin: 0 auto;
    position: relative;
  }

  .ai-category-carousel-viewport-{{ ai_gen_id }} {
    overflow: hidden;
    width: 100%;
  }

  .ai-category-carousel-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease-out;
    gap: {{ block.settings.category_gap }}px;
  }

  .ai-category-item-{{ ai_gen_id }} {
    text-align: center;
    padding: 15px 0;
    box-sizing: border-box;
    flex-shrink: 0;
  }

  /* Desktop: {{ block.settings.slides_desktop }} items */
  .ai-category-item-{{ ai_gen_id }} {
    width: calc((100% - ({{ block.settings.slides_desktop | minus: 1 }} * {{ block.settings.category_gap }}px)) / {{ block.settings.slides_desktop }});
  }

  /* Mobile: {{ block.settings.slides_mobile }} items */
  @media (max-width: 768px) {
    .ai-category-item-{{ ai_gen_id }} {
      width: calc((100% - ({{ block.settings.slides_mobile | minus: 1 }} * {{ block.settings.category_gap }}px)) / {{ block.settings.slides_mobile }});
    }
  }

  .ai-category-item-{{ ai_gen_id }} img {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto;
    object-fit: cover;
    border-radius: 50%;
    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
    transition: all 0.2s ease-in-out;
    display: block;
  }

  .ai-category-item-{{ ai_gen_id }}:hover img {
    transform: scale(1.1);
  }

  .ai-category-item-{{ ai_gen_id }} a {
    text-decoration: none;
    color: {{ block.settings.text_color }};
    display: block;
  }

  .ai-category-item-{{ ai_gen_id }} h2 {
    font-size: {{ block.settings.title_size }}px;
    margin: 10px 0 0 0;
    font-family: {{ block.settings.title_font.family }}, {{ block.settings.title_font.fallback_families }};
    font-weight: {{ block.settings.title_font.weight }};
    color: {{ block.settings.text_color }};
  }

  .ai-category-nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: {{ block.settings.nav_gap }}px;
  }

  @media (max-width: 768px) {
    .ai-category-nav-{{ ai_gen_id }} {
      display: none;
    }
  }

  .ai-category-nav-btn-{{ ai_gen_id }} {
    background: {{ block.settings.nav_button_color }};
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: {{ block.settings.nav_button_text_color }};
    transition: all 0.3s ease;
  }

  .ai-category-nav-btn-{{ ai_gen_id }}:hover {
    background: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.1);
  }

  .ai-category-nav-btn-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .ai-category-placeholder-{{ ai_gen_id }} {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto;
    border-radius: 50%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-category-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }

  .ai-category-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: #666;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .ai-category-item-{{ ai_gen_id }} img {
      height: {{ block.settings.image_size | times: 0.7 }}px;
      width: {{ block.settings.image_size | times: 0.7 }}px;
    }

    .ai-category-item-{{ ai_gen_id }} h2 {
      font-size: {{ block.settings.title_size | times: 0.85 }}px;
    }

    .ai-category-placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.image_size | times: 0.7 }}px;
      width: {{ block.settings.image_size | times: 0.7 }}px;
    }

    .ai-category-nav-{{ ai_gen_id }} {
      margin-top: {{ block.settings.nav_gap | times: 0.7 }}px;
    }
  }

  @media (max-width: 480px) {
    .ai-category-carousel-{{ ai_gen_id }} {
      width: 95%;
    }
  }
{% endstyle %}

<div class="ai-category-carousel-wrapper-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-category-carousel-{{ ai_gen_id }}" 
       data-carousel
       data-slides-desktop="{{ block.settings.slides_desktop }}"
       data-slides-mobile="{{ block.settings.slides_mobile }}"
       data-scroll-amount="{{ block.settings.scroll_amount }}"
       data-gap="{{ block.settings.category_gap }}">
    
    {% assign has_content = false %}
    {% for i in (1..8) %}
      {% assign title_key = 'category_' | append: i | append: '_title' %}
      {% if block.settings[title_key] != blank %}
        {% assign has_content = true %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if has_content %}
      <div class="ai-category-carousel-viewport-{{ ai_gen_id }}">
        <div class="ai-category-carousel-track-{{ ai_gen_id }}" data-track>
          {% for i in (1..8) %}
            {% assign title_key = 'category_' | append: i | append: '_title' %}
            {% assign image_key = 'category_' | append: i | append: '_image' %}
            {% assign link_key = 'category_' | append: i | append: '_link' %}
            
            {% assign category_title = block.settings[title_key] %}
            {% assign category_image = block.settings[image_key] %}
            {% assign category_link = block.settings[link_key] %}
            
            {% if category_title != blank %}
              <div class="ai-category-item-{{ ai_gen_id }}">
                {% if category_link != blank %}
                  <a href="{{ category_link }}">
                {% endif %}
                
                {% if category_image != blank %}
                  <img 
                    src="{{ category_image | image_url: width: 200 }}" 
                    alt="{{ category_title | escape }}"
                    loading="lazy"
                    width="{{ block.settings.image_size }}"
                    height="{{ block.settings.image_size }}"
                  />
                {% else %}
                  <div class="ai-category-placeholder-{{ ai_gen_id }}">
                    {{ 'image' | placeholder_svg_tag }}
                  </div>
                {% endif %}
                
                <h2>{{ category_title }}</h2>
                
                {% if category_link != blank %}
                  </a>
                {% endif %}
              </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <div class="ai-category-nav-{{ ai_gen_id }}">
        <button class="ai-category-nav-btn-{{ ai_gen_id }}" data-prev aria-label="Previous categories">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="ai-category-nav-btn-{{ ai_gen_id }}" data-next aria-label="Next categories">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-category-empty-state-{{ ai_gen_id }}">
        Add category titles to get started
      </div>
    {% endif %}
  </div>
</div>

<script>
(function() {
  const carousels = document.querySelectorAll('[data-carousel]');
  
  carousels.forEach(carousel => {
    const track = carousel.querySelector('[data-track]');
    const prevBtn = carousel.querySelector('[data-prev]');
    const nextBtn = carousel.querySelector('[data-next]');
    
    if (!track) return;
    
    const items = Array.from(track.children);
    if (items.length === 0) return;
    
    // Get settings from data attributes
    const slidesDesktop = parseInt(carousel.dataset.slidesDesktop) || 6;
    const slidesMobile = parseInt(carousel.dataset.slidesMobile) || 2;
    const scrollAmount = parseInt(carousel.dataset.scrollAmount) || 2;
    const gap = parseInt(carousel.dataset.gap) || 20;
    
    let currentIndex = 0;
    let slidesPerView = slidesDesktop;
    
    function getItemsPerView() {
      return window.innerWidth <= 768 ? slidesMobile : slidesDesktop;
    }
    
    function updateSlidesPerView() {
      slidesPerView = getItemsPerView();
    }
    
    function move(direction) {
      updateSlidesPerView();
      
      const maxIndex = Math.max(0, items.length - slidesPerView);
      
      if (direction === 'next') {
        currentIndex = Math.min(currentIndex + scrollAmount, maxIndex);
      } else {
        currentIndex = Math.max(currentIndex - scrollAmount, 0);
      }
      
      updateCarousel();
    }
    
    function updateCarousel() {
      updateSlidesPerView();
      
      // Get the actual width of one item
      const itemWidth = items[0].offsetWidth;
      
      // Calculate translation
      const translateX = currentIndex * (itemWidth + gap);
      track.style.transform = `translateX(-${translateX}px)`;
      
      updateButtons();
    }
    
    function updateButtons() {
      const maxIndex = Math.max(0, items.length - slidesPerView);
      
      if (prevBtn) {
        prevBtn.disabled = currentIndex === 0;
      }
      
      if (nextBtn) {
        nextBtn.disabled = currentIndex >= maxIndex || items.length <= slidesPerView;
      }
    }
    
    // Button click handlers
    if (prevBtn) {
      prevBtn.addEventListener('click', () => move('prev'));
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => move('next'));
    }
    
    // Touch/swipe support
    let touchStartX = 0;
    let touchStartY = 0;
    let isDragging = false;
    
    track.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isDragging = true;
    }, { passive: true });
    
    track.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      
      const touchY = e.touches[0].clientY;
      const diffY = Math.abs(touchY - touchStartY);
      
      // Allow vertical scrolling if user is scrolling vertically
      if (diffY > 10) {
        isDragging = false;
      }
    }, { passive: true });
    
    track.addEventListener('touchend', (e) => {
      if (!isDragging) return;
      
      const touchEndX = e.changedTouches[0].clientX;
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          move('next');
        } else {
          move('prev');
        }
      }
      
      isDragging = false;
    }, { passive: true });
    
    // Handle window resize
    let resizeTimer;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        currentIndex = 0;
        updateCarousel();
      }, 200);
    });
    
    // Initial update
    updateCarousel();
  });
})();
</script>

{% schema %}
{
  "name": "Category carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Section style"
    },
    {
      "type": "color",
      "id": "section_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "slides_desktop",
      "min": 2,
      "max": 8,
      "step": 1,
      "label": "Categories per row (desktop)",
      "default": 6
    },
    {
      "type": "range",
      "id": "slides_mobile",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Categories per row (mobile)",
      "default": 2
    },
    {
      "type": "range",
      "id": "scroll_amount",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Scroll amount",
      "default": 2
    },
    {
      "type": "range",
      "id": "category_gap",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Gap between categories",
      "default": 20
    },
    {
      "type": "header",
      "content": "Image"
    },
    {
      "type": "range",
      "id": "image_size",
      "min": 60,
      "max": 150,
      "step": 10,
      "unit": "px",
      "label": "Image size",
      "default": 100
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "font_picker",
      "id": "title_font",
      "label": "Title font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 14
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "range",
      "id": "nav_gap",
      "min": 5,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Gap between categories and arrows",
      "default": 10
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Button background",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Button icon color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Category 1"
    },
    {
      "type": "text",
      "id": "category_1_title",
      "label": "Title",
      "default": "Electronics"
    },
    {
      "type": "image_picker",
      "id": "category_1_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_1_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 2"
    },
    {
      "type": "text",
      "id": "category_2_title",
      "label": "Title",
      "default": "Fashion"
    },
    {
      "type": "image_picker",
      "id": "category_2_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_2_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 3"
    },
    {
      "type": "text",
      "id": "category_3_title",
      "label": "Title",
      "default": "Home & Garden"
    },
    {
      "type": "image_picker",
      "id": "category_3_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_3_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 4"
    },
    {
      "type": "text",
      "id": "category_4_title",
      "label": "Title",
      "default": "Sports"
    },
    {
      "type": "image_picker",
      "id": "category_4_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_4_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 5"
    },
    {
      "type": "text",
      "id": "category_5_title",
      "label": "Title",
      "default": "Books"
    },
    {
      "type": "image_picker",
      "id": "category_5_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_5_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 6"
    },
    {
      "type": "text",
      "id": "category_6_title",
      "label": "Title",
      "default": "Beauty"
    },
    {
      "type": "image_picker",
      "id": "category_6_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_6_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 7"
    },
    {
      "type": "text",
      "id": "category_7_title",
      "label": "Title",
      "default": "Toys"
    },
    {
      "type": "image_picker",
      "id": "category_7_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_7_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 8"
    },
    {
      "type": "text",
      "id": "category_8_title",
      "label": "Title",
      "default": "Automotive"
    },
    {
      "type": "image_picker",
      "id": "category_8_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_8_link",
      "label": "Link"
    }
  ],
  "presets": [
    {
      "name": "Category carousel"
    }
  ]
}
{% endschema %}