{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-carousel-wrapper-{{ ai_gen_id }} {
    background-color: {{ block.settings.section_background_color }};
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-category-carousel-{{ ai_gen_id }} {
    width: 85%;
    margin: 0 auto;
    overflow: hidden;
    position: relative;
  }

  .ai-category-carousel-container-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    gap: {{ block.settings.category_gap }}px;
    will-change: transform;
  }

  .ai-category-item-{{ ai_gen_id }} {
    text-align: center;
    padding: 15px 0;
    flex: 0 0 auto;
    min-width: calc((100% - ({{ block.settings.slides_desktop | minus: 1 }} * {{ block.settings.category_gap }}px)) / {{ block.settings.slides_desktop }});
  }

  .ai-category-item-{{ ai_gen_id }} img {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto;
    object-fit: cover;
    border-radius: 50%;
    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
    transition: all 0.2s ease-in-out;
    display: block;
  }

  .ai-category-item-{{ ai_gen_id }}:hover img {
    transform: scale(1.1);
  }

  .ai-category-item-{{ ai_gen_id }} a {
    text-decoration: none;
    color: {{ block.settings.text_color }};
    display: block;
  }

  .ai-category-item-{{ ai_gen_id }} h2 {
    font-size: {{ block.settings.title_size }}px;
    margin: 10px 0 0 0;
    font-family: {{ block.settings.title_font.family }}, {{ block.settings.title_font.fallback_families }};
    font-weight: {{ block.settings.title_font.weight }};
    color: {{ block.settings.text_color }};
  }

  .ai-category-nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: {{ block.settings.nav_gap }}px;
  }

  .ai-category-nav-btn-{{ ai_gen_id }} {
    background: {{ block.settings.nav_button_color }};
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: {{ block.settings.nav_button_text_color }};
    transition: all 0.3s ease;
  }

  .ai-category-nav-btn-{{ ai_gen_id }}:hover {
    background: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.1);
  }

  .ai-category-nav-btn-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .ai-category-placeholder-{{ ai_gen_id }} {
    height: {{ block.settings.image_size }}px;
    width: {{ block.settings.image_size }}px;
    margin: 0 auto;
    border-radius: 50%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-category-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }

  .ai-category-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: #666;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .ai-category-item-{{ ai_gen_id }} {
      min-width: calc((100% - ({{ block.settings.slides_mobile | minus: 1 }} * {{ block.settings.category_gap }}px)) / {{ block.settings.slides_mobile }});
    }

    .ai-category-item-{{ ai_gen_id }} img {
      height: {{ block.settings.image_size | times: 0.7 }}px;
      width: {{ block.settings.image_size | times: 0.7 }}px;
    }

    .ai-category-item-{{ ai_gen_id }} h2 {
      font-size: {{ block.settings.title_size | times: 0.85 }}px;
    }

    .ai-category-placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.image_size | times: 0.7 }}px;
      width: {{ block.settings.image_size | times: 0.7 }}px;
    }

    .ai-category-nav-{{ ai_gen_id }} {
      margin-top: {{ block.settings.nav_gap | times: 0.7 }}px;
    }
  }

  @media (max-width: 480px) {
    .ai-category-carousel-{{ ai_gen_id }} {
      width: 95%;
    }
  }
{% endstyle %}

<div class="ai-category-carousel-wrapper-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <category-carousel-{{ ai_gen_id }} class="ai-category-carousel-{{ ai_gen_id }}">
    {% assign has_content = false %}
    {% for i in (1..8) %}
      {% assign title_key = 'category_' | append: i | append: '_title' %}
      {% if block.settings[title_key] != blank %}
        {% assign has_content = true %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if has_content %}
      <div class="ai-category-carousel-container-{{ ai_gen_id }}" data-carousel-container>
        {% for i in (1..8) %}
          {% assign title_key = 'category_' | append: i | append: '_title' %}
          {% assign image_key = 'category_' | append: i | append: '_image' %}
          {% assign link_key = 'category_' | append: i | append: '_link' %}
          
          {% assign category_title = block.settings[title_key] %}
          {% assign category_image = block.settings[image_key] %}
          {% assign category_link = block.settings[link_key] %}
          
          {% if category_title != blank %}
            <div class="ai-category-item-{{ ai_gen_id }}">
              {% if category_link != blank %}
                <a href="{{ category_link }}">
              {% endif %}
              
              {% if category_image != blank %}
                <img 
                  src="{{ category_image | image_url: width: 200 }}" 
                  alt="{{ category_title | escape }}"
                  loading="lazy"
                  width="{{ block.settings.image_size }}"
                  height="{{ block.settings.image_size }}"
                />
              {% else %}
                <div class="ai-category-placeholder-{{ ai_gen_id }}">
                  {{ 'image' | placeholder_svg_tag }}
                </div>
              {% endif %}
              
              <h2>{{ category_title }}</h2>
              
              {% if category_link != blank %}
                </a>
              {% endif %}
            </div>
          {% endif %}
        {% endfor %}
      </div>

      <div class="ai-category-nav-{{ ai_gen_id }}">
        <button class="ai-category-nav-btn-{{ ai_gen_id }}" data-prev-btn aria-label="Previous categories">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="ai-category-nav-btn-{{ ai_gen_id }}" data-next-btn aria-label="Next categories">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-category-empty-state-{{ ai_gen_id }}">
        Add category titles to get started
      </div>
    {% endif %}
  </category-carousel-{{ ai_gen_id }}>
</div>

<script>
  (function() {
    class CategoryCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.itemsPerView = {{ block.settings.slides_desktop }};
        this.itemsPerViewMobile = {{ block.settings.slides_mobile }};
        this.scrollAmount = {{ block.settings.scroll_amount }};
      }

      connectedCallback() {
        this.container = this.querySelector('[data-carousel-container]');
        this.prevBtn = this.querySelector('[data-prev-btn]');
        this.nextBtn = this.querySelector('[data-next-btn]');
        this.items = this.querySelectorAll('.ai-category-item-{{ ai_gen_id }}');
        
        if (!this.container || this.items.length === 0) return;

        this.updateItemsPerView();
        this.setupEventListeners();
        this.updateButtons();
        
        window.addEventListener('resize', () => {
          this.updateItemsPerView();
          // Reset position on resize to prevent overflow
          this.currentIndex = 0;
          this.updateCarousel();
        });
      }

      updateItemsPerView() {
        this.itemsPerView = window.innerWidth <= 768 ? this.itemsPerViewMobile : {{ block.settings.slides_desktop }};
      }

      setupEventListeners() {
        if (this.prevBtn) {
          this.prevBtn.addEventListener('click', () => this.prev());
        }
        if (this.nextBtn) {
          this.nextBtn.addEventListener('click', () => this.next());
        }

        let startX = 0;
        let isDragging = false;

        this.container.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        }, { passive: true });

        this.container.addEventListener('touchend', (e) => {
          if (!isDragging) return;
          
          const endX = e.changedTouches[0].clientX;
          const diff = startX - endX;
          
          // Only trigger if swipe is significant
          if (Math.abs(diff) > 50) {
            if (diff > 0) {
              this.next();
            } else {
              this.prev();
            }
          }
          
          isDragging = false;
        }, { passive: true });
      }

      prev() {
        if (this.currentIndex > 0) {
          this.currentIndex = Math.max(0, this.currentIndex - this.scrollAmount);
          this.updateCarousel();
        }
      }

      next() {
        const maxIndex = Math.max(0, this.items.length - this.itemsPerView);
        if (this.currentIndex < maxIndex) {
          this.currentIndex = Math.min(maxIndex, this.currentIndex + this.scrollAmount);
          this.updateCarousel();
        }
      }

      updateCarousel() {
        // Calculate item width including gap
        const gap = {{ block.settings.category_gap }};
        const containerWidth = this.container.offsetWidth;
        const totalGapWidth = (this.itemsPerView - 1) * gap;
        const itemWidth = (containerWidth - totalGapWidth) / this.itemsPerView;
        const itemWidthWithGap = itemWidth + gap;
        
        // Calculate translate based on actual item width + gap
        const translateX = -(this.currentIndex * itemWidthWithGap);
        
        // Ensure we don't scroll past the last set of items
        const maxTranslate = -(Math.max(0, this.items.length - this.itemsPerView) * itemWidthWithGap);
        const finalTranslate = Math.max(maxTranslate, translateX);
        
        this.container.style.transform = `translateX(${finalTranslate}px)`;
        this.updateButtons();
      }

      updateButtons() {
        if (this.prevBtn) {
          this.prevBtn.disabled = this.currentIndex === 0;
        }
        if (this.nextBtn) {
          const maxIndex = Math.max(0, this.items.length - this.itemsPerView);
          this.nextBtn.disabled = this.currentIndex >= maxIndex;
        }
      }
    }

    customElements.define('category-carousel-{{ ai_gen_id }}', CategoryCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Section style"
    },
    {
      "type": "color",
      "id": "section_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "slides_desktop",
      "min": 2,
      "max": 8,
      "step": 1,
      "label": "Categories per row (desktop)",
      "default": 6
    },
    {
      "type": "range",
      "id": "slides_mobile",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Categories per row (mobile)",
      "default": 2
    },
    {
      "type": "range",
      "id": "scroll_amount",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Scroll amount",
      "default": 2
    },
    {
      "type": "range",
      "id": "category_gap",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Gap between categories",
      "default": 20
    },
    {
      "type": "header",
      "content": "Image"
    },
    {
      "type": "range",
      "id": "image_size",
      "min": 60,
      "max": 150,
      "step": 10,
      "unit": "px",
      "label": "Image size",
      "default": 100
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "font_picker",
      "id": "title_font",
      "label": "Title font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 14
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "range",
      "id": "nav_gap",
      "min": 5,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Gap between categories and arrows",
      "default": 10
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Button background",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Button icon color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Category 1"
    },
    {
      "type": "text",
      "id": "category_1_title",
      "label": "Title",
      "default": "Electronics"
    },
    {
      "type": "image_picker",
      "id": "category_1_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_1_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 2"
    },
    {
      "type": "text",
      "id": "category_2_title",
      "label": "Title",
      "default": "Fashion"
    },
    {
      "type": "image_picker",
      "id": "category_2_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_2_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 3"
    },
    {
      "type": "text",
      "id": "category_3_title",
      "label": "Title",
      "default": "Home & Garden"
    },
    {
      "type": "image_picker",
      "id": "category_3_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_3_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 4"
    },
    {
      "type": "text",
      "id": "category_4_title",
      "label": "Title",
      "default": "Sports"
    },
    {
      "type": "image_picker",
      "id": "category_4_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_4_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 5"
    },
    {
      "type": "text",
      "id": "category_5_title",
      "label": "Title",
      "default": "Books"
    },
    {
      "type": "image_picker",
      "id": "category_5_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_5_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 6"
    },
    {
      "type": "text",
      "id": "category_6_title",
      "label": "Title",
      "default": "Beauty"
    },
    {
      "type": "image_picker",
      "id": "category_6_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_6_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 7"
    },
    {
      "type": "text",
      "id": "category_7_title",
      "label": "Title",
      "default": "Toys"
    },
    {
      "type": "image_picker",
      "id": "category_7_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_7_link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Category 8"
    },
    {
      "type": "text",
      "id": "category_8_title",
      "label": "Title",
      "default": "Automotive"
    },
    {
      "type": "image_picker",
      "id": "category_8_image",
      "label": "Image"
    },
    {
      "type": "url",
      "id": "category_8_link",
      "label": "Link"
    }
  ],
  "presets": [
    {
      "name": "Category carousel"
    }
  ]
}
{% endschema %}