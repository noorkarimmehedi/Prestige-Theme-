{% doc %}
  @prompt
    build a category slider. should be customizable in every section , create a category slider navigation for me without image the text are in a squared box, i should be swiper in mobile version
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-nav-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding: {{ block.settings.section_padding_top }}px 0 {{ block.settings.section_padding_bottom }}px;
    background-color: {{ block.settings.background_color }};
    overflow: hidden;
  }

  .ai-category-nav__container-{{ ai_gen_id }} {
    max-width: {{ block.settings.container_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-category-nav__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.header_spacing }}px;
  }

  .ai-category-nav__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 {{ block.settings.title_spacing }}px;
    font-family: {{ settings.heading_font.family }}, {{ settings.heading_font.fallback_families }};
    font-weight: {{ settings.heading_font.weight }};
    text-transform: {{ settings.heading_text_transform }};
    letter-spacing: {{ settings.heading_letter_spacing }}%;
  }

  .ai-category-nav__subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.subtitle_color }};
    margin: 0;
    font-family: {{ settings.text_font.family }}, {{ settings.text_font.fallback_families }};
    font-weight: {{ settings.text_font.weight }};
  }

  .ai-category-nav__wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
  }

  .ai-category-nav__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.item_spacing }}px;
    transition: transform 0.3s ease;
    touch-action: pan-x;
  }

  .ai-category-nav__item-{{ ai_gen_id }} {
    flex: 0 0 auto;
    min-width: {{ block.settings.box_size }}px;
    height: {{ block.settings.box_size }}px;
  }

  .ai-category-nav__box-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: {{ block.settings.box_background }};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: {{ block.settings.text_color }};
    transition: all 0.3s ease;
    box-shadow: {{ block.settings.shadow_horizontal }}px {{ block.settings.shadow_vertical }}px {{ block.settings.shadow_blur }}px rgba(0, 0, 0, {{ block.settings.shadow_opacity }});
    position: relative;
    overflow: hidden;
  }

  .ai-category-nav__box-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.box_hover_background }};
    color: {{ block.settings.text_hover_color }};
    border-color: {{ block.settings.border_hover_color }};
    transform: translateY(-{{ block.settings.hover_lift }}px);
    box-shadow: {{ block.settings.shadow_horizontal }}px {{ block.settings.shadow_vertical | plus: block.settings.hover_lift }}px {{ block.settings.shadow_blur | plus: 4 }}px rgba(0, 0, 0, {{ block.settings.shadow_opacity | plus: 0.1 }});
  }

  .ai-category-nav__box-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.active_background }};
    color: {{ block.settings.active_text_color }};
    border-color: {{ block.settings.active_border_color }};
  }

  .ai-category-nav__text-{{ ai_gen_id }} {
    font-size: {{ block.settings.font_size }}px;
    font-weight: {{ block.settings.font_weight }};
    text-align: center;
    line-height: 1.2;
    padding: 8px;
    font-family: {{ settings.text_font.family }}, {{ settings.text_font.fallback_families }};
    text-transform: {{ settings.button_text_transform }};
    letter-spacing: {{ settings.button_letter_spacing }}%;
  }

  .ai-category-nav__navigation-{{ ai_gen_id }} {
    display: none;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 2;
  }

  .ai-category-nav__nav-button-{{ ai_gen_id }} {
    width: {{ block.settings.nav_button_size }}px;
    height: {{ block.settings.nav_button_size }}px;
    border-radius: 50%;
    border: none;
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_icon_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-category-nav__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.1);
  }

  .ai-category-nav__nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .ai-category-nav__nav-button-{{ ai_gen_id }} svg {
    width: {{ block.settings.nav_button_size | times: 0.5 }}px;
    height: {{ block.settings.nav_button_size | times: 0.5 }}px;
  }

  .ai-category-nav__prev-{{ ai_gen_id }} {
    left: -{{ block.settings.nav_button_size | divided_by: 2 }}px;
  }

  .ai-category-nav__next-{{ ai_gen_id }} {
    right: -{{ block.settings.nav_button_size | divided_by: 2 }}px;
  }

  .ai-category-nav__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: {{ block.settings.dots_spacing }}px;
  }

  .ai-category-nav__dot-{{ ai_gen_id }} {
    width: {{ block.settings.dot_size }}px;
    height: {{ block.settings.dot_size }}px;
    border-radius: 50%;
    border: none;
    background-color: {{ block.settings.dot_color }};
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .ai-category-nav__dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
    transform: scale(1.2);
  }

  @media screen and (min-width: 769px) {
    .ai-category-nav__navigation-{{ ai_gen_id }} {
      {% if block.settings.show_desktop_navigation %}
        display: block;
      {% endif %}
    }

    .ai-category-nav__item-{{ ai_gen_id }} {
      min-width: calc((100% - {{ block.settings.item_spacing | times: block.settings.items_desktop | minus: 1 }}px) / {{ block.settings.items_desktop }});
    }

    .ai-category-nav__dots-{{ ai_gen_id }} {
      {% unless block.settings.show_desktop_dots %}
        display: none;
      {% endunless %}
    }
  }

  @media screen and (max-width: 768px) {
    .ai-category-nav__item-{{ ai_gen_id }} {
      min-width: {{ block.settings.box_size | times: 0.9 }}px;
      height: {{ block.settings.box_size | times: 0.9 }}px;
    }

    .ai-category-nav__text-{{ ai_gen_id }} {
      font-size: {{ block.settings.font_size | times: 0.9 }}px;
    }

    .ai-category-nav__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.8 }}px;
    }

    .ai-category-nav__dots-{{ ai_gen_id }} {
      {% unless block.settings.show_mobile_dots %}
        display: none;
      {% endunless %}
    }
  }

  @media screen and (max-width: 480px) {
    .ai-category-nav__item-{{ ai_gen_id }} {
      min-width: {{ block.settings.box_size | times: 0.8 }}px;
      height: {{ block.settings.box_size | times: 0.8 }}px;
    }

    .ai-category-nav__text-{{ ai_gen_id }} {
      font-size: {{ block.settings.font_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<category-nav-slider-{{ ai_gen_id }}
  class="ai-category-nav-{{ ai_gen_id }}"
  data-items-desktop="{{ block.settings.items_desktop }}"
  data-enable-swipe="{{ block.settings.enable_mobile_swipe }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-category-nav__container-{{ ai_gen_id }}">
    {% if block.settings.title != blank or block.settings.subtitle != blank %}
      <div class="ai-category-nav__header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-category-nav__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.subtitle != blank %}
          <p class="ai-category-nav__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
        {% endif %}
      </div>
    {% endif %}

    <div class="ai-category-nav__wrapper-{{ ai_gen_id }}">
      <div class="ai-category-nav__track-{{ ai_gen_id }}">
        {% for i in (1..8) %}
          {% liquid
            assign collection_key = 'collection_' | append: i
            assign title_key = 'category_title_' | append: i
            assign link_key = 'category_link_' | append: i

            assign collection = block.settings[collection_key]
            assign custom_title = block.settings[title_key]
            assign custom_link = block.settings[link_key]

            if collection != blank
              assign category_title = collection.title
              assign category_link = collection.url
            else
              assign category_title = custom_title
              assign category_link = custom_link
            endif

            if custom_title != blank
              assign category_title = custom_title
            endif

            if custom_link != blank
              assign category_link = custom_link
            endif
          %}

          {% if category_title != blank %}
            <div class="ai-category-nav__item-{{ ai_gen_id }}">
              {% if category_link != blank %}
                <a href="{{ category_link }}" class="ai-category-nav__box-{{ ai_gen_id }}">
                  <span class="ai-category-nav__text-{{ ai_gen_id }}">{{ category_title }}</span>
                </a>
              {% else %}
                <div class="ai-category-nav__box-{{ ai_gen_id }}">
                  <span class="ai-category-nav__text-{{ ai_gen_id }}">{{ category_title }}</span>
                </div>
              {% endif %}
            </div>
          {% endif %}
        {% endfor %}
      </div>

      {% if block.settings.show_desktop_navigation %}
        <div class="ai-category-nav__navigation-{{ ai_gen_id }}">
          <button class="ai-category-nav__nav-button-{{ ai_gen_id }} ai-category-nav__prev-{{ ai_gen_id }}" aria-label="Previous categories">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <button class="ai-category-nav__nav-button-{{ ai_gen_id }} ai-category-nav__next-{{ ai_gen_id }}" aria-label="Next categories">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
      {% endif %}

      {% if block.settings.show_desktop_dots or block.settings.show_mobile_dots %}
        <div class="ai-category-nav__dots-{{ ai_gen_id }}"></div>
      {% endif %}
    </div>
  </div>
</category-nav-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class CategoryNavSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
        this.itemsPerView = 1;
        this.isDragging = false;
        this.startX = 0;
        this.currentX = 0;
        this.initialTransform = 0;
      }

      connectedCallback() {
        this.track = this.querySelector('.ai-category-nav__track-{{ ai_gen_id }}');
        this.items = this.querySelectorAll('.ai-category-nav__item-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-category-nav__prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-category-nav__next-{{ ai_gen_id }}');
        this.dotsContainer = this.querySelector('.ai-category-nav__dots-{{ ai_gen_id }}');

        this.itemsDesktop = parseInt(this.dataset.itemsDesktop) || 6;
        this.enableSwipe = this.dataset.enableSwipe === 'true';

        this.init();
      }

      init() {
        this.updateItemsPerView();
        this.calculateTotalSlides();
        this.createDots();
        this.setupEventListeners();
        this.updateSlider();

        window.addEventListener('resize', () => {
          this.updateItemsPerView();
          this.calculateTotalSlides();
          this.createDots();
          this.updateSlider();
        });
      }

      updateItemsPerView() {
        if (window.innerWidth <= 768) {
          this.itemsPerView = Math.min(this.items.length, 3);
        } else {
          this.itemsPerView = Math.min(this.items.length, this.itemsDesktop);
        }
      }

      calculateTotalSlides() {
        this.totalSlides = Math.max(0, this.items.length - this.itemsPerView + 1);
      }

      createDots() {
        if (!this.dotsContainer || this.totalSlides <= 1) return;
        
        this.dotsContainer.innerHTML = '';
        
        for (let i = 0; i < this.totalSlides; i++) {
          const dot = document.createElement('button');
          dot.className = `ai-category-nav__dot-{{ ai_gen_id }} ${i === this.currentSlide ? 'active' : ''}`;
          dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
          dot.addEventListener('click', () => this.goToSlide(i));
          this.dotsContainer.appendChild(dot);
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.nextSlide());
        }

        if (this.enableSwipe && window.innerWidth <= 768) {
          this.setupTouchEvents();
        }

        window.addEventListener('resize', () => {
          if (this.enableSwipe && window.innerWidth <= 768) {
            this.setupTouchEvents();
          } else {
            this.removeTouchEvents();
          }
        });
      }

      setupTouchEvents() {
        this.track.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });
        this.track.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
        this.track.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });
        
        this.track.addEventListener('mousedown', this.handleMouseDown.bind(this));
        this.track.addEventListener('mousemove', this.handleMouseMove.bind(this));
        this.track.addEventListener('mouseup', this.handleMouseUp.bind(this));
        this.track.addEventListener('mouseleave', this.handleMouseUp.bind(this));
      }

      removeTouchEvents() {
        this.track.removeEventListener('touchstart', this.handleTouchStart.bind(this));
        this.track.removeEventListener('touchmove', this.handleTouchMove.bind(this));
        this.track.removeEventListener('touchend', this.handleTouchEnd.bind(this));
        
        this.track.removeEventListener('mousedown', this.handleMouseDown.bind(this));
        this.track.removeEventListener('mousemove', this.handleMouseMove.bind(this));
        this.track.removeEventListener('mouseup', this.handleMouseUp.bind(this));
        this.track.removeEventListener('mouseleave', this.handleMouseUp.bind(this));
      }

      handleTouchStart(e) {
        this.startDrag(e.touches[0].clientX);
      }

      handleTouchMove(e) {
        if (this.isDragging) {
          e.preventDefault();
          this.updateDrag(e.touches[0].clientX);
        }
      }

      handleTouchEnd(e) {
        this.endDrag();
      }

      handleMouseDown(e) {
        e.preventDefault();
        this.startDrag(e.clientX);
      }

      handleMouseMove(e) {
        if (this.isDragging) {
          this.updateDrag(e.clientX);
        }
      }

      handleMouseUp(e) {
        this.endDrag();
      }

      startDrag(clientX) {
        this.isDragging = true;
        this.startX = clientX;
        this.initialTransform = this.getCurrentTransform();
        this.track.style.transition = 'none';
      }

      updateDrag(clientX) {
        if (!this.isDragging) return;
        
        this.currentX = clientX;
        const deltaX = this.currentX - this.startX;
        const newTransform = this.initialTransform + deltaX;
        
        this.track.style.transform = `translateX(${newTransform}px)`;
      }

      endDrag() {
        if (!this.isDragging) return;
        
        this.isDragging = false;
        this.track.style.transition = 'transform 0.3s ease';
        
        const deltaX = this.currentX - this.startX;
        const threshold = 50;
        
        if (Math.abs(deltaX) > threshold) {
          if (deltaX > 0 && this.currentSlide > 0) {
            this.prevSlide();
          } else if (deltaX < 0 && this.currentSlide < this.totalSlides - 1) {
            this.nextSlide();
          } else {
            this.updateSlider();
          }
        } else {
          this.updateSlider();
        }
      }

      getCurrentTransform() {
        const style = window.getComputedStyle(this.track);
        const matrix = style.transform;
        if (matrix === 'none') return 0;
        
        const values = matrix.split('(')[1].split(')')[0].split(',');
        return parseFloat(values[4]) || 0;
      }

      updateSlider() {
        if (!this.track) return;

        const itemWidth = this.items[0] ? this.items[0].offsetWidth : 0;
        const gap = parseInt(getComputedStyle(this.track).gap) || 0;
        const translateX = -this.currentSlide * (itemWidth + gap);
        
        this.track.style.transform = `translateX(${translateX}px)`;

        this.updateNavigation();
        this.updateDots();
      }

      updateNavigation() {
        if (this.prevButton) {
          this.prevButton.disabled = this.currentSlide === 0;
        }
        
        if (this.nextButton) {
          this.nextButton.disabled = this.currentSlide >= this.totalSlides - 1;
        }
      }

      updateDots() {
        if (!this.dotsContainer) return;
        
        const dots = this.dotsContainer.querySelectorAll('.ai-category-nav__dot-{{ ai_gen_id }}');
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });
      }

      goToSlide(index) {
        this.currentSlide = Math.max(0, Math.min(index, this.totalSlides - 1));
        this.updateSlider();
      }

      nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
          this.currentSlide++;
          this.updateSlider();
        }
      }

      prevSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
          this.updateSlider();
        }
      }
    }

    customElements.define('category-nav-slider-{{ ai_gen_id }}', CategoryNavSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category nav slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Section header"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        { "value": "left", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right" }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 28
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 14
    },
    {
      "type": "range",
      "id": "title_spacing",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Title bottom spacing",
      "default": 8
    },
    {
      "type": "range",
      "id": "header_spacing",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Header bottom spacing",
      "default": 32
    },
    {
      "type": "header",
      "content": "Slider settings"
    },
    {
      "type": "range",
      "id": "items_desktop",
      "min": 3,
      "max": 8,
      "step": 1,
      "label": "Items per view (desktop)",
      "default": 6
    },
    {
      "type": "checkbox",
      "id": "enable_mobile_swipe",
      "label": "Enable mobile swipe",
      "default": true
    },
    {
      "type": "header",
      "content": "Box design"
    },
    {
      "type": "range",
      "id": "box_size",
      "min": 60,
      "max": 150,
      "step": 5,
      "unit": "px",
      "label": "Box size",
      "default": 100
    },
    {
      "type": "range",
      "id": "item_spacing",
      "min": 8,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Space between items",
      "default": 16
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "hover_lift",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Hover lift effect",
      "default": 2
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 13
    },
    {
      "type": "range",
      "id": "font_weight",
      "min": 300,
      "max": 700,
      "step": 100,
      "label": "Font weight",
      "default": 500
    },
    {
      "type": "header",
      "content": "Box shadow"
    },
    {
      "type": "range",
      "id": "shadow_horizontal",
      "min": -5,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Horizontal offset",
      "default": 0
    },
    {
      "type": "range",
      "id": "shadow_vertical",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Vertical offset",
      "default": 2
    },
    {
      "type": "range",
      "id": "shadow_blur",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Blur radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "shadow_opacity",
      "min": 0,
      "max": 0.3,
      "step": 0.1,
      "label": "Shadow opacity",
      "default": 0.1
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_desktop_navigation",
      "label": "Show desktop navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_desktop_dots",
      "label": "Show desktop dots",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_mobile_dots",
      "label": "Show mobile dots",
      "default": true
    },
    {
      "type": "range",
      "id": "nav_button_size",
      "min": 30,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Navigation button size",
      "default": 40
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 6,
      "max": 14,
      "step": 2,
      "unit": "px",
      "label": "Dot size",
      "default": 8
    },
    {
      "type": "range",
      "id": "dots_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Dots top spacing",
      "default": 20
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Section background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "box_background",
      "label": "Box background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "box_hover_background",
      "label": "Box hover background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "text_hover_color",
      "label": "Text hover color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "border_hover_color",
      "label": "Border hover color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "active_background",
      "label": "Active box background",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "active_text_color",
      "label": "Active text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "active_border_color",
      "label": "Active border color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Navigation icon color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#1c1c1c"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "container_width",
      "min": 1000,
      "max": 1400,
      "step": 20,
      "unit": "px",
      "label": "Container max width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Section top padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Section bottom padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Category 1"
    },
    {
      "type": "collection",
      "id": "collection_1",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_1",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_1",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 2"
    },
    {
      "type": "collection",
      "id": "collection_2",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_2",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_2",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 3"
    },
    {
      "type": "collection",
      "id": "collection_3",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_3",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_3",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 4"
    },
    {
      "type": "collection",
      "id": "collection_4",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_4",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_4",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 5"
    },
    {
      "type": "collection",
      "id": "collection_5",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_5",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_5",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 6"
    },
    {
      "type": "collection",
      "id": "collection_6",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_6",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_6",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 7"
    },
    {
      "type": "collection",
      "id": "collection_7",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_7",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_7",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 8"
    },
    {
      "type": "collection",
      "id": "collection_8",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_title_8",
      "label": "Custom title"
    },
    {
      "type": "url",
      "id": "category_link_8",
      "label": "Custom link"
    }
  ],
  "presets": [
    {
      "name": "Category nav slider"
    }
  ]
}
{% endschema %}