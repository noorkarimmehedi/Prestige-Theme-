{% doc %}
  @prompt
    AI generated
    
    
    create a category navigation for me without image the text are in a squared box, i should be swiper in mobile version, small box size. section design can be cutomizable and box size can be customizable, i don't the arrow key for swipe it should be swipeable 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-nav-{{ ai_gen_id }} {
    width: 100%;
    padding: {{ block.settings.section_padding_top }}px 0 {{ block.settings.section_padding_bottom }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-category-nav-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-category-nav-title-{{ ai_gen_id }} {
    text-align: {{ block.settings.title_alignment }};
    margin-bottom: {{ block.settings.title_spacing }}px;
    color: {{ block.settings.title_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin-top: 0;
  }

  .ai-category-nav-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: {{ block.settings.gap_size }}px;
  }

  .ai-category-nav-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    justify-content: center;
    width: {{ block.settings.box_size }}px;
    height: {{ block.settings.box_size }}px;
    background-color: {{ block.settings.box_background_color }};
    border: {{ block.settings.box_border_width }}px solid {{ block.settings.box_border_color }};
    border-radius: {{ block.settings.box_border_radius }}px;
    text-decoration: none;
    color: {{ block.settings.box_text_color }};
    font-size: {{ block.settings.box_text_size }}px;
    font-weight: {{ block.settings.box_text_weight }};
    text-align: center;
    transition: all 0.3s ease;
    cursor: pointer;
    justify-self: center;
  }

  .ai-category-nav-item-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.box_hover_background_color }};
    color: {{ block.settings.box_hover_text_color }};
    border-color: {{ block.settings.box_hover_border_color }};
    transform: translateY(-2px);
  }

  .ai-category-nav-swiper-{{ ai_gen_id }} {
    display: none;
    overflow: hidden;
    position: relative;
  }

  .ai-category-nav-swiper-wrapper-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    gap: {{ block.settings.gap_size }}px;
    padding: 0 20px;
    touch-action: pan-x;
  }

  .ai-category-nav-swiper-slide-{{ ai_gen_id }} {
    flex: 0 0 auto;
  }

  .ai-category-nav-dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 15px;
  }

  .ai-category-nav-dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.5;
    border: none;
    padding: 0;
  }

  .ai-category-nav-dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
    opacity: 1;
  }

  @media screen and (max-width: 749px) {
    .ai-category-nav-grid-{{ ai_gen_id }} {
      display: none;
    }

    .ai-category-nav-swiper-{{ ai_gen_id }} {
      display: block;
    }

    .ai-category-nav-item-{{ ai_gen_id }} {
      width: {{ block.settings.box_size_mobile }}px;
      height: {{ block.settings.box_size_mobile }}px;
      font-size: {{ block.settings.box_text_size_mobile }}px;
    }

    .ai-category-nav-container-{{ ai_gen_id }} {
      padding: 0 10px;
    }
  }
{% endstyle %}

<category-navigation-{{ ai_gen_id }}
  class="ai-category-nav-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-category-nav-container-{{ ai_gen_id }}">
    {% if block.settings.section_title != blank %}
      <h2 class="ai-category-nav-title-{{ ai_gen_id }}">{{ block.settings.section_title }}</h2>
    {% endif %}

    <div class="ai-category-nav-grid-{{ ai_gen_id }}">
      {% for i in (1..8) %}
        {% liquid
          assign category_text_key = 'category_' | append: i | append: '_text'
          assign category_link_key = 'category_' | append: i | append: '_link'
          assign category_text = block.settings[category_text_key]
          assign category_link = block.settings[category_link_key]
        %}
        
        {% if category_text != blank %}
          <a
            href="{{ category_link | default: '#' }}"
            class="ai-category-nav-item-{{ ai_gen_id }}"
          >
            {{ category_text }}
          </a>
        {% endif %}
      {% endfor %}
    </div>

    <div class="ai-category-nav-swiper-{{ ai_gen_id }}">
      <div class="ai-category-nav-swiper-wrapper-{{ ai_gen_id }}">
        {% for i in (1..8) %}
          {% liquid
            assign category_text_key = 'category_' | append: i | append: '_text'
            assign category_link_key = 'category_' | append: i | append: '_link'
            assign category_text = block.settings[category_text_key]
            assign category_link = block.settings[category_link_key]
          %}
          
          {% if category_text != blank %}
            <div class="ai-category-nav-swiper-slide-{{ ai_gen_id }}">
              <a
                href="{{ category_link | default: '#' }}"
                class="ai-category-nav-item-{{ ai_gen_id }}"
              >
                {{ category_text }}
              </a>
            </div>
          {% endif %}
        {% endfor %}
      </div>

      {% if block.settings.show_dots %}
        <div class="ai-category-nav-dots-{{ ai_gen_id }}"></div>
      {% endif %}
    </div>
  </div>
</category-navigation-{{ ai_gen_id }}>

<script>
  (function() {
    class CategoryNavigation{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.slidesPerView = {{ block.settings.slides_per_view_mobile }};
        this.totalSlides = 0;
        this.startX = 0;
        this.currentX = 0;
        this.isDragging = false;
        this.startTransform = 0;
      }

      connectedCallback() {
        this.swiper = this.querySelector('.ai-category-nav-swiper-{{ ai_gen_id }}');
        this.wrapper = this.querySelector('.ai-category-nav-swiper-wrapper-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-category-nav-swiper-slide-{{ ai_gen_id }}');
        this.dotsContainer = this.querySelector('.ai-category-nav-dots-{{ ai_gen_id }}');

        this.totalSlides = this.slides.length;
        this.maxSlide = Math.max(0, this.totalSlides - this.slidesPerView);

        this.setupEventListeners();
        this.createDots();
        this.updateDots();
      }

      setupEventListeners() {
        this.wrapper.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
        this.wrapper.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
        this.wrapper.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: true });

        this.wrapper.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        this.wrapper.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        this.wrapper.addEventListener('mouseup', (e) => this.handleMouseUp(e));
        this.wrapper.addEventListener('mouseleave', (e) => this.handleMouseUp(e));
      }

      handleTouchStart(e) {
        this.startX = e.touches[0].clientX;
        this.isDragging = true;
        this.startTransform = this.getCurrentTransform();
        this.wrapper.style.transition = 'none';
      }

      handleTouchMove(e) {
        if (!this.isDragging) return;
        e.preventDefault();
        
        this.currentX = e.touches[0].clientX;
        const diff = this.currentX - this.startX;
        const newTransform = this.startTransform + diff;
        
        this.wrapper.style.transform = `translateX(${newTransform}px)`;
      }

      handleTouchEnd(e) {
        if (!this.isDragging) return;
        this.isDragging = false;
        
        this.wrapper.style.transition = 'transform 0.3s ease';
        
        const diff = this.startX - this.currentX;
        const threshold = 50;
        
        if (Math.abs(diff) > threshold) {
          if (diff > 0 && this.currentSlide < this.maxSlide) {
            this.currentSlide = Math.min(this.maxSlide, this.currentSlide + 1);
          } else if (diff < 0 && this.currentSlide > 0) {
            this.currentSlide = Math.max(0, this.currentSlide - 1);
          }
        }
        
        this.updateSlider();
      }

      handleMouseDown(e) {
        e.preventDefault();
        this.startX = e.clientX;
        this.isDragging = true;
        this.startTransform = this.getCurrentTransform();
        this.wrapper.style.transition = 'none';
        this.wrapper.style.cursor = 'grabbing';
      }

      handleMouseMove(e) {
        if (!this.isDragging) return;
        
        this.currentX = e.clientX;
        const diff = this.currentX - this.startX;
        const newTransform = this.startTransform + diff;
        
        this.wrapper.style.transform = `translateX(${newTransform}px)`;
      }

      handleMouseUp(e) {
        if (!this.isDragging) return;
        this.isDragging = false;
        
        this.wrapper.style.transition = 'transform 0.3s ease';
        this.wrapper.style.cursor = 'grab';
        
        const diff = this.startX - this.currentX;
        const threshold = 50;
        
        if (Math.abs(diff) > threshold) {
          if (diff > 0 && this.currentSlide < this.maxSlide) {
            this.currentSlide = Math.min(this.maxSlide, this.currentSlide + 1);
          } else if (diff < 0 && this.currentSlide > 0) {
            this.currentSlide = Math.max(0, this.currentSlide - 1);
          }
        }
        
        this.updateSlider();
      }

      getCurrentTransform() {
        const style = window.getComputedStyle(this.wrapper);
        const matrix = style.transform;
        if (matrix === 'none') return 0;
        
        const values = matrix.split('(')[1].split(')')[0].split(',');
        return parseFloat(values[4]) || 0;
      }

      createDots() {
        if (!this.dotsContainer) return;
        
        const dotsCount = Math.ceil(this.totalSlides / this.slidesPerView);
        for (let i = 0; i < dotsCount; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-category-nav-dot-{{ ai_gen_id }}';
          dot.addEventListener('click', () => this.goToSlide(i));
          this.dotsContainer.appendChild(dot);
        }
      }

      updateDots() {
        const dots = this.querySelectorAll('.ai-category-nav-dot-{{ ai_gen_id }}');
        const activeDotIndex = Math.floor(this.currentSlide / this.slidesPerView);
        
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === activeDotIndex);
        });
      }

      goToSlide(slideIndex) {
        this.currentSlide = Math.min(this.maxSlide, Math.max(0, slideIndex * this.slidesPerView));
        this.updateSlider();
      }

      updateSlider() {
        const slideWidth = this.slides[0].offsetWidth + {{ block.settings.gap_size }};
        const translateX = -this.currentSlide * slideWidth;
        this.wrapper.style.transform = `translateX(${translateX}px)`;
        
        this.updateDots();
      }
    }

    customElements.define('category-navigation-{{ ai_gen_id }}', CategoryNavigation{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category navigation",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Section"
    },
    {
      "type": "text",
      "id": "section_title",
      "label": "Section title",
      "default": "Shop by Category"
    },
    {
      "type": "select",
      "id": "title_alignment",
      "label": "Title alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "range",
      "id": "title_spacing",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Title spacing",
      "default": 32
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#1c1c1c"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 8,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "gap_size",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between items",
      "default": 16
    },
    {
      "type": "header",
      "content": "Box style"
    },
    {
      "type": "range",
      "id": "box_size",
      "min": 60,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Box size (desktop)",
      "default": 120
    },
    {
      "type": "range",
      "id": "box_size_mobile",
      "min": 50,
      "max": 120,
      "step": 5,
      "unit": "px",
      "label": "Box size (mobile)",
      "default": 80
    },
    {
      "type": "color",
      "id": "box_background_color",
      "label": "Box background color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "box_hover_background_color",
      "label": "Box hover background color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "box_border_color",
      "label": "Box border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "box_hover_border_color",
      "label": "Box hover border color",
      "default": "#1c1c1c"
    },
    {
      "type": "range",
      "id": "box_border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Box border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "box_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Box border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Text style"
    },
    {
      "type": "color",
      "id": "box_text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "box_hover_text_color",
      "label": "Hover text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "box_text_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Text size (desktop)",
      "default": 14
    },
    {
      "type": "range",
      "id": "box_text_size_mobile",
      "min": 10,
      "max": 16,
      "step": 1,
      "unit": "px",
      "label": "Text size (mobile)",
      "default": 12
    },
    {
      "type": "select",
      "id": "box_text_weight",
      "label": "Text weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi-bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "header",
      "content": "Mobile swiper"
    },
    {
      "type": "range",
      "id": "slides_per_view_mobile",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Items per view (mobile)",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#1c1c1c"
    },
    {
      "type": "header",
      "content": "Categories"
    },
    {
      "type": "text",
      "id": "category_1_text",
      "label": "Category 1 text",
      "default": "Electronics"
    },
    {
      "type": "url",
      "id": "category_1_link",
      "label": "Category 1 link"
    },
    {
      "type": "text",
      "id": "category_2_text",
      "label": "Category 2 text",
      "default": "Fashion"
    },
    {
      "type": "url",
      "id": "category_2_link",
      "label": "Category 2 link"
    },
    {
      "type": "text",
      "id": "category_3_text",
      "label": "Category 3 text",
      "default": "Home"
    },
    {
      "type": "url",
      "id": "category_3_link",
      "label": "Category 3 link"
    },
    {
      "type": "text",
      "id": "category_4_text",
      "label": "Category 4 text",
      "default": "Sports"
    },
    {
      "type": "url",
      "id": "category_4_link",
      "label": "Category 4 link"
    },
    {
      "type": "text",
      "id": "category_5_text",
      "label": "Category 5 text"
    },
    {
      "type": "url",
      "id": "category_5_link",
      "label": "Category 5 link"
    },
    {
      "type": "text",
      "id": "category_6_text",
      "label": "Category 6 text"
    },
    {
      "type": "url",
      "id": "category_6_link",
      "label": "Category 6 link"
    },
    {
      "type": "text",
      "id": "category_7_text",
      "label": "Category 7 text"
    },
    {
      "type": "url",
      "id": "category_7_link",
      "label": "Category 7 link"
    },
    {
      "type": "text",
      "id": "category_8_text",
      "label": "Category 8 text"
    },
    {
      "type": "url",
      "id": "category_8_link",
      "label": "Category 8 link"
    }
  ],
  "presets": [
    {
      "name": "Category navigation"
    }
  ]
}
{% endschema %}