{% doc %}
  @prompt
    create a category navigation for me without image the text are in a squared box, i should be swiper in mobile version
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-nav-{{ ai_gen_id }} {
    width: 100%;
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-category-nav-container-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: {{ block.settings.gap_size }}px;
    max-width: 100%;
  }

  .ai-category-nav-item-{{ ai_gen_id }} {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: {{ block.settings.box_height }}px;
    background-color: {{ block.settings.box_background_color }};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    text-decoration: none;
    transition: all 0.3s ease;
    padding: 20px;
    text-align: center;
  }

  .ai-category-nav-item-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.box_hover_background_color }};
    border-color: {{ block.settings.border_hover_color }};
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .ai-category-nav-text-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.text_size }}px;
    font-weight: {{ block.settings.text_weight }};
    text-transform: {{ block.settings.text_transform }};
    letter-spacing: {{ block.settings.letter_spacing }}px;
    margin: 0;
    line-height: 1.2;
  }

  .ai-category-nav-item-{{ ai_gen_id }}:hover .ai-category-nav-text-{{ ai_gen_id }} {
    color: {{ block.settings.text_hover_color }};
  }

  @media screen and (max-width: 749px) {
    .ai-category-nav-container-{{ ai_gen_id }} {
      display: flex;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      gap: {{ block.settings.gap_size | times: 0.75 }}px;
      padding-bottom: 10px;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .ai-category-nav-container-{{ ai_gen_id }}::-webkit-scrollbar {
      display: none;
    }

    .ai-category-nav-item-{{ ai_gen_id }} {
      min-width: {{ block.settings.mobile_item_width }}px;
      min-height: {{ block.settings.box_height | times: 0.8 }}px;
      padding: 15px;
      flex-shrink: 0;
      scroll-snap-align: start;
    }

    .ai-category-nav-text-{{ ai_gen_id }} {
      font-size: {{ block.settings.text_size | times: 0.9 }}px;
    }

    .ai-category-nav-{{ ai_gen_id }} {
      position: relative;
    }

    .ai-category-nav-indicators-{{ ai_gen_id }} {
      display: flex;
      justify-content: center;
      gap: 8px;
      margin-top: 15px;
    }

    .ai-category-nav-dot-{{ ai_gen_id }} {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: {{ block.settings.border_color }};
      transition: background-color 0.3s ease;
      cursor: pointer;
    }

    .ai-category-nav-dot-{{ ai_gen_id }}.active {
      background-color: {{ block.settings.text_color }};
    }
  }

  @media screen and (min-width: 750px) {
    .ai-category-nav-indicators-{{ ai_gen_id }} {
      display: none;
    }
  }
{% endstyle %}

<category-nav-swiper-{{ ai_gen_id }} class="ai-category-nav-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-category-nav-container-{{ ai_gen_id }}">
    {% for i in (1..8) %}
      {% liquid
        assign category_key = 'category_' | append: i
        assign category_text_key = 'category_' | append: i | append: '_text'
        assign category_link_key = 'category_' | append: i | append: '_link'
        
        assign category_collection = block.settings[category_key]
        assign category_text = block.settings[category_text_key]
        assign category_link = block.settings[category_link_key]
      %}

      {% if category_collection != blank or category_text != blank or category_link != blank %}
        {% liquid
          if category_link != blank
            assign final_link = category_link
          elsif category_collection != blank
            assign final_link = category_collection.url
          else
            assign final_link = '#'
          endif

          if category_text != blank
            assign final_text = category_text
          elsif category_collection != blank
            assign final_text = category_collection.title
          else
            assign final_text = 'Category ' | append: i
          endif
        %}

        <a href="{{ final_link }}" class="ai-category-nav-item-{{ ai_gen_id }}" data-index="{{ forloop.index0 }}">
          <h3 class="ai-category-nav-text-{{ ai_gen_id }}">{{ final_text }}</h3>
        </a>
      {% endif %}
    {% endfor %}
  </div>
  <div class="ai-category-nav-indicators-{{ ai_gen_id }}"></div>
</category-nav-swiper-{{ ai_gen_id }}>

<script>
  (function() {
    class CategoryNavSwiper{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.container = null;
        this.items = [];
        this.indicators = [];
        this.currentIndex = 0;
        this.itemWidth = 0;
        this.isMobile = false;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-category-nav-container-{{ ai_gen_id }}');
        this.items = Array.from(this.querySelectorAll('.ai-category-nav-item-{{ ai_gen_id }}'));
        this.indicatorsContainer = this.querySelector('.ai-category-nav-indicators-{{ ai_gen_id }}');
        
        this.checkMobile();
        this.setupEventListeners();
        
        if (this.isMobile) {
          this.createIndicators();
          this.updateActiveIndicator();
        }
      }

      checkMobile() {
        this.isMobile = window.innerWidth <= 749;
      }

      setupEventListeners() {
        window.addEventListener('resize', () => {
          this.checkMobile();
          if (this.isMobile) {
            this.createIndicators();
          } else {
            this.clearIndicators();
          }
        });

        if (this.isMobile) {
          this.container.addEventListener('scroll', this.handleScroll.bind(this));
        }
      }

      createIndicators() {
        if (!this.isMobile || this.items.length <= 1) return;
        
        this.clearIndicators();
        
        const itemsPerView = this.getItemsPerView();
        const totalPages = Math.ceil(this.items.length / itemsPerView);
        
        for (let i = 0; i < totalPages; i++) {
          const dot = document.createElement('div');
          dot.className = 'ai-category-nav-dot-{{ ai_gen_id }}';
          dot.addEventListener('click', () => this.scrollToPage(i));
          this.indicatorsContainer.appendChild(dot);
          this.indicators.push(dot);
        }
      }

      clearIndicators() {
        this.indicatorsContainer.innerHTML = '';
        this.indicators = [];
      }

      getItemsPerView() {
        if (!this.isMobile) return this.items.length;
        
        const containerWidth = this.container.offsetWidth;
        const itemWidth = {{ block.settings.mobile_item_width }};
        const gap = {{ block.settings.gap_size | times: 0.75 }};
        
        return Math.floor((containerWidth + gap) / (itemWidth + gap));
      }

      scrollToPage(pageIndex) {
        if (!this.isMobile) return;
        
        const itemsPerView = this.getItemsPerView();
        const targetIndex = pageIndex * itemsPerView;
        const itemWidth = {{ block.settings.mobile_item_width }};
        const gap = {{ block.settings.gap_size | times: 0.75 }};
        
        const scrollLeft = targetIndex * (itemWidth + gap);
        
        this.container.scrollTo({
          left: scrollLeft,
          behavior: 'smooth'
        });
      }

      handleScroll() {
        if (!this.isMobile) return;
        
        const scrollLeft = this.container.scrollLeft;
        const itemWidth = {{ block.settings.mobile_item_width }};
        const gap = {{ block.settings.gap_size | times: 0.75 }};
        const itemsPerView = this.getItemsPerView();
        
        const currentPage = Math.round(scrollLeft / ((itemWidth + gap) * itemsPerView));
        
        if (currentPage !== this.currentIndex) {
          this.currentIndex = currentPage;
          this.updateActiveIndicator();
        }
      }

      updateActiveIndicator() {
        if (!this.isMobile) return;
        
        this.indicators.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentIndex);
        });
      }
    }

    customElements.define('category-nav-swiper-{{ ai_gen_id }}', CategoryNavSwiper{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category navigation",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "mobile_item_width",
      "min": 120,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Item width on mobile",
      "default": 150
    },
    {
      "type": "range",
      "id": "gap_size",
      "min": 5,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Gap between boxes",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Box style"
    },
    {
      "type": "range",
      "id": "box_height",
      "min": 80,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Box height",
      "default": 120
    },
    {
      "type": "color",
      "id": "box_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "box_hover_background_color",
      "label": "Hover background color",
      "default": "#f5f5f5"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "border_hover_color",
      "label": "Hover border color",
      "default": "#1c1c1c"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Text style"
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 16
    },
    {
      "type": "select",
      "id": "text_weight",
      "label": "Text weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "600"
    },
    {
      "type": "select",
      "id": "text_transform",
      "label": "Text transform",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "uppercase",
          "label": "Uppercase"
        },
        {
          "value": "lowercase",
          "label": "Lowercase"
        },
        {
          "value": "capitalize",
          "label": "Capitalize"
        }
      ],
      "default": "uppercase"
    },
    {
      "type": "range",
      "id": "letter_spacing",
      "min": 0,
      "max": 3,
      "step": 0.5,
      "unit": "px",
      "label": "Letter spacing",
      "default": 1
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1c1c1c"
    },
    {
      "type": "color",
      "id": "text_hover_color",
      "label": "Hover text color",
      "default": "#1c1c1c"
    },
    {
      "type": "header",
      "content": "Category 1"
    },
    {
      "type": "collection",
      "id": "category_1",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_1_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_1_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 2"
    },
    {
      "type": "collection",
      "id": "category_2",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_2_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_2_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 3"
    },
    {
      "type": "collection",
      "id": "category_3",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_3_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_3_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 4"
    },
    {
      "type": "collection",
      "id": "category_4",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_4_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_4_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 5"
    },
    {
      "type": "collection",
      "id": "category_5",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_5_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_5_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 6"
    },
    {
      "type": "collection",
      "id": "category_6",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_6_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_6_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 7"
    },
    {
      "type": "collection",
      "id": "category_7",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_7_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_7_link",
      "label": "Custom link"
    },
    {
      "type": "header",
      "content": "Category 8"
    },
    {
      "type": "collection",
      "id": "category_8",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "category_8_text",
      "label": "Custom text"
    },
    {
      "type": "url",
      "id": "category_8_link",
      "label": "Custom link"
    }
  ],
  "presets": [
    {
      "name": "Category navigation"
    }
  ]
}
{% endschema %}